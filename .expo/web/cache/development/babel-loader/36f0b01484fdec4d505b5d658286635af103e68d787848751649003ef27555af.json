{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { MD3LightTheme as DefaultTheme, PaperProvider } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLongPressed = _useState2[0],\n    setLongPressed = _useState2[1];\n  return _jsx(PaperProvider, {\n    theme: DefaultTheme,\n    children: _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsx(Pressable, {\n        style: function style(_ref) {\n          var pressed = _ref.pressed;\n          return {\n            backgroundColor: pressed ? \"green\" : \"red\",\n            width: 200,\n            height: 100,\n            textAlign: \"center\"\n          };\n        },\n        onPress: function onPress() {\n          console.log(\"Вы нажали на кнопку\");\n        },\n        onLongPress: function onLongPress() {\n          setLongPressed(true);\n        },\n        onPressOut: function onPressOut() {\n          setLongPressed(false);\n        },\n        children: function children(_ref2) {\n          var pressed = _ref2.pressed;\n          return pressed ? _jsx(Text, {\n            children: \"Yes\"\n          }) : _jsx(Text, {\n            children: \"No\"\n          });\n        }\n      }), _jsx(Text, {\n        children: isLongPressed ? \"Произошло длительное нажатие\" : \"\"\n      })]\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["React","useState","View","Text","Switch","Pressable","StyleSheet","MD3LightTheme","DefaultTheme","PaperProvider","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","isLongPressed","setLongPressed","theme","children","style","flex","alignItems","justifyContent","_ref","pressed","backgroundColor","width","height","textAlign","onPress","console","log","onLongPress","onPressOut","_ref2"],"sources":["C:/Users/ТерёхинН/Desktop/native/AwesomeProject/App.js"],"sourcesContent":["import React, { useState } from 'react'; \nimport { View, Text, Switch, Pressable, StyleSheet } from 'react-native'; \nimport { \n  MD3LightTheme as DefaultTheme, \n  PaperProvider, \n} from 'react-native-paper'; \n \nconst App = () => { \n \n  const [isLongPressed, setLongPressed] = useState(false); \n \n  return ( \n    <PaperProvider theme={DefaultTheme}> \n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}> \n        <Pressable \n          style={({pressed}) => ({ \n            backgroundColor: pressed ? \"green\" : \"red\", \n            width: 200, \n            height: 100, \n            textAlign: \"center\" \n          })} \n \n          onPress={() => { \n            console.log(\"Вы нажали на кнопку\") \n          }} \n \n          onLongPress={() => { \n            setLongPressed(true) \n          }} \n \n          onPressOut={() => { \n            setLongPressed(false) \n          }} \n        > \n          {({ pressed }) =>  \n            (pressed) ? <Text>Yes</Text> : <Text>No</Text> \n          } \n        </Pressable> \n        <Text>{ (isLongPressed) ? \"Произошло длительное нажатие\" : \"\" }</Text> \n      </View> \n    </PaperProvider> \n  ); \n} \n \n// const theme = StyleSheet.create({ \n//   ...DefaultTheme.colors \n// }) \n \nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAExC,SACEC,aAAa,IAAIC,YAAY,EAC7BC,aAAa,QACR,oBAAoB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE5B,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAEhB,IAAAC,SAAA,GAAwCd,QAAQ,CAAC,KAAK,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhDG,aAAa,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAEpC,OACEL,IAAA,CAACF,aAAa;IAACW,KAAK,EAAEZ,YAAa;IAAAa,QAAA,EACjCR,KAAA,CAACX,IAAI;MAACoB,KAAK,EAAE;QAAEC,IAAI,EAAE,CAAC;QAAEC,UAAU,EAAE,QAAQ;QAAEC,cAAc,EAAE;MAAS,CAAE;MAAAJ,QAAA,GACvEV,IAAA,CAACN,SAAS;QACRiB,KAAK,EAAE,SAAAA,MAAAI,IAAA;UAAA,IAAEC,OAAO,GAAAD,IAAA,CAAPC,OAAO;UAAA,OAAO;YACrBC,eAAe,EAAED,OAAO,GAAG,OAAO,GAAG,KAAK;YAC1CE,KAAK,EAAE,GAAG;YACVC,MAAM,EAAE,GAAG;YACXC,SAAS,EAAE;UACb,CAAC;QAAA,CAAE;QAEHC,OAAO,EAAE,SAAAA,QAAA,EAAM;UACbC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACpC,CAAE;QAEFC,WAAW,EAAE,SAAAA,YAAA,EAAM;UACjBhB,cAAc,CAAC,IAAI,CAAC;QACtB,CAAE;QAEFiB,UAAU,EAAE,SAAAA,WAAA,EAAM;UAChBjB,cAAc,CAAC,KAAK,CAAC;QACvB,CAAE;QAAAE,QAAA,EAED,SAAAA,SAAAgB,KAAA;UAAA,IAAGV,OAAO,GAAAU,KAAA,CAAPV,OAAO;UAAA,OACRA,OAAO,GAAIhB,IAAA,CAACR,IAAI;YAAAkB,QAAA,EAAC;UAAG,CAAM,CAAC,GAAGV,IAAA,CAACR,IAAI;YAAAkB,QAAA,EAAC;UAAE,CAAM,CAAC;QAAA;MAAA,CAEvC,CAAC,EACZV,IAAA,CAACR,IAAI;QAAAkB,QAAA,EAAIH,aAAa,GAAI,8BAA8B,GAAG;MAAE,CAAQ,CAAC;IAAA,CAClE;EAAC,CACM,CAAC;AAEpB,CAAC;AAMD,eAAeJ,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}